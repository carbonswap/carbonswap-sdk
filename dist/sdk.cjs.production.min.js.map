{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  EWC = 246,\n  VOLTA = 73799\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n// export const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const getFactoryAddress = (chainId: ChainId) => {\n  switch(chainId) {\n    case ChainId.VOLTA:\n      return '0xD44463E5299dC807924Ff94B05aF53b3dF037301'\n    case ChainId.EWC:\n      return '0x17854c8d5a41d5A89B275386E24B2F38FD0AfbDd'\n    default:\n      return '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n  }\n}\n\nexport const INIT_CODE_HASH ='0x930f72af52e9f7553fd568961dff48b9d73ba993c0ddc3f637f6af07a34e97bd'\n//export const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly chainId: ChainId\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(ChainId.MAINNET, 18, 'ETH', 'Ether')\n  public static readonly EWT: Currency = new Currency(ChainId.EWC, 18, 'EWT', 'Energy Web Token')\n  public static readonly VT: Currency = new Currency(ChainId.VOLTA, 18, 'VT', 'Volta Token')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: ChainId, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    const ncurr = getNativeCurrency(chainId)\n\n    if (!ncurr) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n\n    return ncurr\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === ETHER.symbol || this?.symbol === EWT.symbol || this?.symbol === VT.symbol) {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === ETHER.name || this?.name === EWT.name || this?.name === VT.name) {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\nconst EWT = Currency.EWT\nconst VT = Currency.VT\n\nconst getNativeCurrency = (chainId: ChainId) => {\n  switch(chainId) {\n    case ChainId.EWC:\n      return EWT\n    case ChainId.VOLTA:\n      return VT\n    default:\n      return ETHER\n  }\n}\n\nexport { ETHER, EWT, VT, getNativeCurrency }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.EWC]: new Token(ChainId.EWC, '0x6b3bd0478DF0eC4984b168Db0E12A539Cc0c83cd', 18, 'WEWT', 'Wrapped Energy Web Token'),\n  [ChainId.VOLTA]: new Token(ChainId.VOLTA, '0xDb8B4264b1777e046267b4Cc123f0C9E029cEB2c', 18, 'WVT', 'Wrapped Volta Token')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, getNativeCurrency } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the native currency\n   * @param amount native amount in wei\n   */\n  public static native(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(getNativeCurrency(chainId), amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.native(this.quoteCurrency.chainId, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  getFactoryAddress\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            getFactoryAddress(tokenA.chainId),\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'CLP',\n      'Carbonswap LP Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, getNativeCurrency } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n\n    const nativeCurrency = getNativeCurrency(pairs[0].chainId)\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === nativeCurrency && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === nativeCurrency && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, getNativeCurrency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === getNativeCurrency(chainId)) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === getNativeCurrency(chainId)) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    const nativeCurrency = getNativeCurrency(route.chainId)\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === nativeCurrency\n        ? CurrencyAmount.native(route.chainId, amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === nativeCurrency\n        ? CurrencyAmount.native(route.chainId, amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.native(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.native(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, getNativeCurrency, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = getNativeCurrency(trade.route.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","chainId","decimals","symbol","getNativeCurrency","ncurr","getNativeCurrencySymbol","this","getNativeCurrencyName","getSymbol","ETHER","EWT","VT","getName","MAINNET","EWC","VOLTA","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","getFactoryAddress","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","nativeCurrency","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","exactQuote","slippage","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"gJAKYA,EAUAC,EAKAC,0ZAfAF,EAAAA,kBAAAA,4CAEVA,yBACAA,yBACAA,wBACAA,sBACAA,mBACAA,0BAGUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,2BAKK,IA2BKC,EAhBCC,EAAgB,qEAGhBC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAClBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAOT,EAAKC,OAAO,KACnBS,EAAQV,EAAKC,OAAO,MAEjC,SAAYJ,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMc,UACVd,EAAae,OAAQZ,EAAKC,OAAO,UACjCJ,EAAagB,SAAUb,EAAKC,OAAO,ioFC7DtC,IAAMa,EAAoB,mBAAoBC,OAMjCC,2FACyC,IAI7CC,KAAOC,EAAKC,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANnBC,QAclCC,8FAC4C,IAIhDN,KAAOO,EAAKL,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANhBC,iBCdlCG,EAA6BC,EAAaC,GAC9C3B,EAAK4B,mBAAmBF,EAAOxB,IAAzC2B,MACU7B,EAAK8B,gBAAgBJ,EAAOf,EAAqBgB,KAA3DE,eAIcE,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,EAAeC,UACtBA,aAAqBpC,EACxBoC,EAEApC,EAAKC,OADgB,iBAAdmC,EACKA,EAAUC,WACVD,YAIFE,EAAKC,GACnBd,EAA6Bc,EAAG1C,EAAagB,aAEzC2B,EADAC,EAAUvC,KAEVF,EAAK0C,YAAYH,EAAGlC,OACtBoC,EAAIF,EACJC,EAAIxC,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGnC,GAAMD,GAC3BH,EAAK6C,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIxC,EAAK4C,OAAO5C,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGC,GAAIA,GAAIpC,QAEzCJ,EAAK8C,SAASP,EAAGrC,KAC1BuC,EAAItC,UAECsC,EAKT,SAAgBM,EAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApBpB,MAEUmB,EAAMG,QAAUF,GAA1BpB,MAGqB,IAAjBmB,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,KCrEnC,IAAaC,wBAmBWC,EAAkBC,EAAkBC,EAAiB7C,GACzEQ,EAA6BzB,EAAKC,OAAO4D,GAAWhE,EAAae,YAE5DgD,QAAUA,OACVC,SAAWA,OACXC,OAASA,OACT7C,KAAOA,IAGA8C,kBAAP,SAAyBH,OACzBA,QACGtC,oBAAoBsC,OAGtBI,EAAQD,GAAkBH,OAE3BI,QACG1C,gDAAgDsC,UAGjDI,KAGKC,wBAAP,SAA+BL,UACbM,KAAKH,kBAAkBH,GACxBE,UAGVK,sBAAP,SAA6BP,UACXM,KAAKH,kBAAkBH,GACxB3C,iCAGjBmD,UAAA,SAAUR,UACVA,2BAIKE,UAAWO,EAAMP,gCAAgBA,UAAWQ,EAAIR,gCAAgBA,UAAWS,EAAGT,OAH/EI,MAAAA,YAAAA,KAAMJ,OAINH,EAASM,wBAAwBL,MAUrCY,QAAA,SAAQZ,UACRA,2BAIK3C,QAASoD,EAAMpD,8BAAcA,QAASqD,EAAIrD,8BAAcA,QAASsD,EAAGtD,KAHrEiD,MAAAA,YAAAA,KAAMjD,KAIN0C,EAASQ,sBAAsBP,SAjEnBD,QAAkB,IAAIA,EAASjE,gBAAQ+E,QAAS,GAAI,MAAO,SAC3Dd,MAAgB,IAAIA,EAASjE,gBAAQgF,IAAK,GAAI,MAAO,oBACrDf,KAAe,IAAIA,EAASjE,gBAAQiF,MAAO,GAAI,KAAM,qBAsExEN,EAAQV,EAASU,MACjBC,EAAMX,EAASW,IACfC,EAAKZ,EAASY,GAEdR,GAAoB,SAACH,UAClBA,QACAlE,gBAAQgF,WACJJ,OACJ5E,gBAAQiF,aACJJ,iBAEAF,IC9FAO,0BAGQhB,EAAkB5B,EAAiB6B,EAAkBC,EAAiB7C,8BACjF2C,EAASC,EAAUC,EAAQ7C,UAC5Be,QAAUD,EAAwBC,uCAOlC6C,OAAA,SAAOC,UAERZ,OAASY,GAGNZ,KAAKN,UAAYkB,EAAMlB,SAAWM,KAAKlC,UAAY8C,EAAM9C,WAS3D+C,YAAA,SAAYD,UACPZ,KAAKN,UAAYkB,EAAMlB,SAAjC/B,MACUqC,KAAKlC,UAAY8C,EAAM9C,SAAjCH,MACOqC,KAAKlC,QAAQgD,cAAgBF,EAAM9C,QAAQgD,kBA7B3BrB,YAoCXsB,GAAeC,EAAqBC,UAC9CD,aAAqBN,IAASO,aAAqBP,GAC9CM,EAAUL,OAAOM,KACfD,aAAqBN,IAErBO,aAAqBP,IAGvBM,IAAcC,aAIZC,WACV1F,gBAAQ+E,SAAU,IAAIG,GACrBlF,gBAAQ+E,QACR,6CACA,GACA,OACA,mBAED/E,gBAAQ2F,SAAU,IAAIT,GACrBlF,gBAAQ2F,QACR,6CACA,GACA,OACA,mBAED3F,gBAAQ4F,SAAU,IAAIV,GACrBlF,gBAAQ4F,QACR,6CACA,GACA,OACA,mBAED5F,gBAAQ6F,OAAQ,IAAIX,GAAMlF,gBAAQ6F,MAAO,6CAA8C,GAAI,OAAQ,mBACnG7F,gBAAQ8F,OAAQ,IAAIZ,GAAMlF,gBAAQ8F,MAAO,6CAA8C,GAAI,OAAQ,mBACnG9F,gBAAQgF,KAAM,IAAIE,GAAMlF,gBAAQgF,IAAK,6CAA8C,GAAI,OAAQ,8BAC/FhF,gBAAQiF,OAAQ,IAAIC,GAAMlF,gBAAQiF,MAAO,6CAA8C,GAAI,MAAO,0BCvE/Fc,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,YACHlG,iBAASmG,YAAaN,GAAQM,cAC9BnG,iBAASoG,eAAgBP,GAAQO,iBACjCpG,iBAASqG,UAAWR,GAAQQ,aAGzBC,YACHtG,iBAASmG,iBACTnG,iBAASoG,oBACTpG,iBAASqG,gBAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyBlG,QAC3DiG,UAAYjE,EAAeiE,QAC3BC,YAAclE,EAAekE,8BAa7BC,OAAA,kBACE,IAAIH,EAASjC,KAAKmC,YAAanC,KAAKkC,cAGtCzD,IAAA,SAAImC,OACHyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAChF9E,EAAKwG,MAAMtC,KAAKmC,YAAaE,EAAYF,aACpC,IAAIF,EAASnG,EAAK2C,IAAIuB,KAAKkC,UAAWG,EAAYH,WAAYlC,KAAKmC,aAErE,IAAIF,EACTnG,EAAK2C,IACH3C,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASF,EAAYH,UAAWlC,KAAKmC,cAE5CrG,EAAKyG,SAASvC,KAAKmC,YAAaE,EAAYF,iBAIzCK,SAAA,SAAS5B,OACRyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAChF9E,EAAKwG,MAAMtC,KAAKmC,YAAaE,EAAYF,aACpC,IAAIF,EAASnG,EAAK0G,SAASxC,KAAKkC,UAAWG,EAAYH,WAAYlC,KAAKmC,aAE1E,IAAIF,EACTnG,EAAK0G,SACH1G,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASF,EAAYH,UAAWlC,KAAKmC,cAE5CrG,EAAKyG,SAASvC,KAAKmC,YAAaE,EAAYF,iBAIzCxD,SAAA,SAASiC,OACRyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAC7E9E,EAAK6C,SACV7C,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASF,EAAYH,UAAWlC,KAAKmC,iBAIvCM,QAAA,SAAQ7B,OACPyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAC7E9E,EAAKwG,MACVxG,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASF,EAAYH,UAAWlC,KAAKmC,iBAIvC3D,YAAA,SAAYoC,OACXyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAC7E9E,EAAK0C,YACV1C,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASF,EAAYH,UAAWlC,KAAKmC,iBAIvCI,SAAA,SAAS3B,OACRyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAC7E,IAAIqB,EACTnG,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYH,WAC1CpG,EAAKyG,SAASvC,KAAKmC,YAAaE,EAAYF,iBAIzCzD,OAAA,SAAOkC,OACNyB,EAAczB,aAAiBqB,EAAWrB,EAAQ,IAAIqB,EAAShE,EAAe2C,WAC7E,IAAIqB,EACTnG,EAAKyG,SAASvC,KAAKkC,UAAWG,EAAYF,aAC1CrG,EAAKyG,SAASvC,KAAKmC,YAAaE,EAAYH,eAIzCQ,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBnH,iBAASoG,eAEpBiB,OAAOC,UAAUL,IAA3BhF,MACUgF,EAAoB,GAA9BhF,MAEA4D,GAAQ0B,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUjB,GAAsBiB,SAC1EM,EAAW,IAAI5B,GAAQvB,KAAKkC,UAAU/D,YACzCiF,IAAIpD,KAAKmC,YAAYhE,YACrBkF,oBAAoBV,UAChBQ,EAAS3B,SAAS2B,EAASG,gBAAiBV,MAG9CW,QAAA,SACLD,EACAV,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBnH,iBAASoG,eAEpBiB,OAAOC,UAAUM,IAA3B3F,MACU2F,GAAiB,GAA3B3F,MAEA+D,GAAI8B,GAAKF,EACT5B,GAAI+B,GAAKzB,GAAgBa,GAClB,IAAInB,GAAI1B,KAAKkC,UAAU/D,YAAYiF,IAAIpD,KAAKmC,YAAYhE,YAAYqD,SAAS8B,EAAeV,6BA1GrG,kBACS9G,EAAK4C,OAAOsB,KAAKkC,UAAWlC,KAAKmC,oCAI1C,kBACS,IAAIF,EAASnG,EAAK4H,UAAU1D,KAAKkC,UAAWlC,KAAKmC,aAAcnC,KAAKmC,sBC9BzET,GAAMF,EAASG,GAERgC,0BAYWC,EAAoBC,SAClCC,EAAe7F,EAAe4F,UACpCtG,EAA6BuG,EAAcnI,EAAagB,wBAElDmH,EAAchI,EAAKiI,aAAa1H,EAAKP,EAAKC,OAAO6H,EAASjE,mBAC3DiE,SAAWA,oBAVX,SAAclE,EAAkBmE,UAC9B,IAAIF,EAAe9D,GAAkBH,GAAUmE,+BAgBjDpF,IAAA,SAAImC,UACCG,GAAef,KAAK4D,SAAUhD,EAAMgD,WAA9CjG,MACO,IAAIgG,EAAe3D,KAAK4D,SAAU9H,EAAK2C,IAAIuB,KAAKgE,IAAKpD,EAAMoD,SAG7DxB,SAAA,SAAS5B,UACJG,GAAef,KAAK4D,SAAUhD,EAAMgD,WAA9CjG,MACO,IAAIgG,EAAe3D,KAAK4D,SAAU9H,EAAK0G,SAASxC,KAAKgE,IAAKpD,EAAMoD,SAGlEtB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBnH,iBAASmG,wBAEjBa,wBAAcC,EAAmBC,EAAQC,MAGjDU,QAAA,SACLD,EACAV,EACAC,mBAFAS,IAAAA,EAAwBtD,KAAK4D,SAASjE,mBAEtCkD,IAAAA,EAAqBnH,iBAASmG,YAEpByB,GAAiBtD,KAAK4D,SAASjE,UAAzChC,kBACa4F,kBAAQD,EAAeV,EAAQC,MAGvCoB,QAAA,SAAQrB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDpB,GAAI8B,GAAKxD,KAAK4D,SAASjE,SAChB,IAAI+B,GAAI1B,KAAKkC,UAAU/D,YAAYiF,IAAIpD,KAAKmC,YAAYhE,YAAYqD,SAASoB,wBAjCtF,kBACS5C,KAAKkC,iBArBoBD,ICNvBiC,0BAIQC,EAAcN,8BACzBM,EAAON,UACRM,MAAQA,sCAGR1F,IAAA,SAAImC,UACCZ,KAAKmE,MAAMxD,OAAOC,EAAMuD,QAAlCxG,MACO,IAAIuG,EAAYlE,KAAKmE,MAAOrI,EAAK2C,IAAIuB,KAAKgE,IAAKpD,EAAMoD,SAGvDxB,SAAA,SAAS5B,UACJZ,KAAKmE,MAAMxD,OAAOC,EAAMuD,QAAlCxG,MACO,IAAIuG,EAAYlE,KAAKmE,MAAOrI,EAAK0G,SAASxC,KAAKgE,IAAKpD,EAAMoD,UAhBpCL,ICKpBS,0BAkBQC,EAAwBC,EAAyBnC,EAAwBD,8BACpFA,EAAWC,UAEZkC,aAAeA,IACfC,cAAgBA,IAChBC,OAAS,IAAItC,GAChBnG,EAAKiI,aAAa1H,EAAKP,EAAKC,OAAOsI,EAAa1E,WAChD7D,EAAKiI,aAAa1H,EAAKP,EAAKC,OAAOuI,EAAc3E,uBApBvC6E,UAAP,SAAiBC,aAChBC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAOxF,KACLuF,EAAMK,WAAQnE,OAAOkE,EAAKE,QACtB,IAAIX,EAAMS,EAAKG,SAASpB,SAAUiB,EAAKI,SAASrB,SAAUiB,EAAKG,SAAShB,IAAKa,EAAKI,SAASjB,KAC3F,IAAII,EAAMS,EAAKI,SAASrB,SAAUiB,EAAKG,SAASpB,SAAUiB,EAAKI,SAASjB,IAAKa,EAAKG,SAAShB,aAG5FU,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAY7C,SAAS8C,KAAeX,EAAO,gCAuBnGtC,OAAA,kBACE,IAAIgC,EAAMpE,KAAKsE,cAAetE,KAAKqE,aAAcrE,KAAKkC,UAAWlC,KAAKmC,gBAGxEI,SAAA,SAAS3B,GACJG,GAAef,KAAKsE,cAAe1D,EAAMyD,eAAnD1G,UACM2H,cAAiB/C,mBAAS3B,UACzB,IAAIwD,EAAMpE,KAAKqE,aAAczD,EAAM0D,cAAegB,EAASnD,YAAamD,EAASpD,cAInFqD,MAAA,SAAMC,UACDzE,GAAeyE,EAAe5B,SAAU5D,KAAKqE,eAAvD1G,MACIqC,KAAKsE,yBAAyB5D,GACzB,IAAIwD,GAAYlE,KAAKsE,cAAemB,YAAMlD,mBAASiD,EAAexB,KAAKb,UAEzEQ,UAAsB3D,KAAKsE,cAAc5E,QAAS+F,YAAMlD,mBAASiD,EAAexB,KAAKb,aAGvFT,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC3C,KAAK0F,SAAShD,cAAcC,EAAmBC,EAAQC,MAGzDU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BtD,KAAK0F,SAASnC,QAAQD,EAAeV,EAAQC,wBAhCtD,kBACS,IAAIZ,GAASjC,KAAKkC,UAAWlC,KAAKmC,mCAG3C,8BACeI,mBAASvC,KAAKuE,eAlCJtC,ICWvB0D,GAAuF,GAE9EC,yBAwBQC,EAA2BC,OACtCC,EAAeF,EAAa1B,MAAMtD,YAAYiF,EAAa3B,OAC7D,CAAC0B,EAAcC,GACf,CAACA,EAAcD,QACdG,eAAiB,IAAItF,GACxBqF,EAAa,GAAG5B,MAAMzE,QACtBkG,EAAK7H,WAAWgI,EAAa,GAAG5B,MAAO4B,EAAa,GAAG5B,OACvD,GACA,MACA,4BAEG4B,aAAeA,IA/BRhI,WAAP,SAAkBkI,EAAeC,iBAChCC,EAASF,EAAOpF,YAAYqF,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,eAEHG,eAAjET,6BAAqBQ,EAAO,GAAGrI,+BAAWqI,EAAO,GAAGrI,YACtD6H,QACKA,WACFQ,EAAO,GAAGrI,wBACN6H,uBAAAU,EAAqBF,EAAO,GAAGrI,iBACjCqI,EAAO,GAAGrI,SAAUwI,oBTTE,SAAC5G,UACzBA,QACAlE,gBAAQiF,YACJ,kDACJjF,gBAAQgF,UACJ,2DAEA,8CSGD+F,CAAkBN,EAAOvG,SACzB8G,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACN,EAAO,GAAGrI,QAASqI,EAAO,GAAGrI,YACjFlC,YAMD+J,GAAmBQ,EAAO,GAAGrI,SAASqI,EAAO,GAAGrI,qCAqBlD4I,cAAA,SAAcvC,UACZA,EAAMxD,OAAOX,KAAK+E,SAAWZ,EAAMxD,OAAOX,KAAK2G,WAqBjDC,QAAA,SAAQzC,UACHnE,KAAK0G,cAAcvC,IAA7BxG,MACOwG,EAAMxD,OAAOX,KAAK+E,QAAU/E,KAAK6G,YAAc7G,KAAK8G,eA0BtDC,UAAA,SAAU5C,UACLnE,KAAK0G,cAAcvC,IAA7BxG,MACOwG,EAAMxD,OAAOX,KAAK+E,QAAU/E,KAAKgF,SAAWhF,KAAKiF,YAGnD+B,gBAAA,SAAgBC,MACXjH,KAAK0G,cAAcO,EAAY9C,QAAzCxG,MACI7B,EAAKwG,MAAMtC,KAAKgF,SAAShB,IAAKhI,IAASF,EAAKwG,MAAMtC,KAAKiF,SAASjB,IAAKhI,SACjE,IAAIc,MAENoK,EAAelH,KAAK+G,UAAUE,EAAY9C,OAC1CgD,EAAgBnH,KAAK+G,UAAUE,EAAY9C,MAAMxD,OAAOX,KAAK+E,QAAU/E,KAAK2G,OAAS3G,KAAK+E,QAC1FqC,EAAqBtL,EAAKyG,SAAS0E,EAAYjD,IAAKzH,GACpD2F,EAAYpG,EAAKyG,SAAS6E,EAAoBD,EAAcnD,KAC5D7B,EAAcrG,EAAK2C,IAAI3C,EAAKyG,SAAS2E,EAAalD,IAAKxH,GAAQ4K,GAC/DC,EAAe,IAAInD,GACvB+C,EAAY9C,MAAMxD,OAAOX,KAAK+E,QAAU/E,KAAK2G,OAAS3G,KAAK+E,OAC3DjJ,EAAK4C,OAAOwD,EAAWC,OAErBrG,EAAKwG,MAAM+E,EAAarD,IAAKhI,SACzB,IAAIqB,QAEL,CAACgK,EAAc,IAAIzB,EAAKsB,EAAazI,IAAIwI,GAAcE,EAAc3E,SAAS6E,QAGhFC,eAAA,SAAeD,MACVrH,KAAK0G,cAAcW,EAAalD,QAA1CxG,MAEE7B,EAAKwG,MAAMtC,KAAKgF,SAAShB,IAAKhI,IAC9BF,EAAKwG,MAAMtC,KAAKiF,SAASjB,IAAKhI,IAC9BF,EAAK4B,mBAAmB2J,EAAarD,IAAKhE,KAAK+G,UAAUM,EAAalD,OAAOH,WAEvE,IAAIlH,MAGNqK,EAAgBnH,KAAK+G,UAAUM,EAAalD,OAC5C+C,EAAelH,KAAK+G,UAAUM,EAAalD,MAAMxD,OAAOX,KAAK+E,QAAU/E,KAAK2G,OAAS3G,KAAK+E,QAC1F7C,EAAYpG,EAAKyG,SAASzG,EAAKyG,SAAS2E,EAAalD,IAAKqD,EAAarD,KAAMxH,GAC7E2F,EAAcrG,EAAKyG,SAASzG,EAAK0G,SAAS2E,EAAcnD,IAAKqD,EAAarD,KAAMzH,GAChF0K,EAAc,IAAI/C,GACtBmD,EAAalD,MAAMxD,OAAOX,KAAK+E,QAAU/E,KAAK2G,OAAS3G,KAAK+E,OAC5DjJ,EAAK2C,IAAI3C,EAAK4C,OAAOwD,EAAWC,GAAclG,UAEzC,CAACgL,EAAa,IAAIrB,EAAKsB,EAAazI,IAAIwI,GAAcE,EAAc3E,SAAS6E,QAG/EE,mBAAA,SACLC,EACA3B,EACAC,GAEU0B,EAAYrD,MAAMxD,OAAOX,KAAKgG,iBAAxCrI,UAMI8J,EALE1B,EAAeF,EAAa1B,MAAMtD,YAAYiF,EAAa3B,OAC7D,CAAC0B,EAAcC,GACf,CAACA,EAAcD,MACTE,EAAa,GAAG5B,MAAMxD,OAAOX,KAAK+E,SAAWgB,EAAa,GAAG5B,MAAMxD,OAAOX,KAAK2G,SAAzFhJ,MAGI7B,EAAKwG,MAAMkF,EAAYxD,IAAKhI,GAC9ByL,EAAY3L,EAAK0G,SAASpE,EAAKtC,EAAKyG,SAASwD,EAAa,GAAG/B,IAAK+B,EAAa,GAAG/B,MAAOnI,OACpF,KACC6L,EAAU5L,EAAK4C,OAAO5C,EAAKyG,SAASwD,EAAa,GAAG/B,IAAKwD,EAAYxD,KAAMhE,KAAKgF,SAAShB,KACzF2D,EAAU7L,EAAK4C,OAAO5C,EAAKyG,SAASwD,EAAa,GAAG/B,IAAKwD,EAAYxD,KAAMhE,KAAKiF,SAASjB,KAC/FyD,EAAY3L,EAAK8B,gBAAgB8J,EAASC,GAAWD,EAAUC,MAE5D7L,EAAK0C,YAAYiJ,EAAWzL,SACzB,IAAIqB,SAEL,IAAI6G,GAAYlE,KAAKgG,eAAgByB,MAGvCG,kBAAA,SACLzD,EACAqD,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGP7H,KAAK0G,cAAcvC,IAA7BxG,MACU6J,EAAYrD,MAAMxD,OAAOX,KAAKgG,iBAAxCrI,MACU8J,EAAUtD,MAAMxD,OAAOX,KAAKgG,iBAAtCrI,MACU7B,EAAK8B,gBAAgB6J,EAAUzD,IAAKwD,EAAYxD,MAA1DrG,MAGKkK,EAEE,CACOC,GAAZnK,UACMqK,EAAc/J,EAAe6J,MAC9BhM,EAAKwG,MAAM0F,EAAahM,GAY3B+L,EAAsBP,MAZY,KAC5BS,EAAQ7J,EAAKtC,EAAKyG,SAASvC,KAAKgF,SAAShB,IAAKhE,KAAKiF,SAASjB,MAC5DkE,EAAY9J,EAAK4J,MACnBlM,EAAK0C,YAAYyJ,EAAOC,GAAY,KAChChG,EAAYpG,EAAKyG,SAASiF,EAAYxD,IAAKlI,EAAK0G,SAASyF,EAAOC,IAChE/F,EAAcrG,EAAK2C,IAAI3C,EAAKyG,SAAS0F,EAAO7L,GAAO8L,GACnDC,EAAerM,EAAK4C,OAAOwD,EAAWC,GAC5C4F,EAAsBP,EAAY/I,IAAI,IAAIyF,GAAYlE,KAAKgG,eAAgBmC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAItD,GACTC,EACArI,EAAK4C,OAAO5C,EAAKyG,SAASkF,EAAUzD,IAAKhE,KAAK+G,UAAU5C,GAAOH,KAAM+D,EAAoB/D,mCAtJ7F,kBACS,IAAII,GAAMpE,KAAK+E,OAAQ/E,KAAK2G,OAAQ3G,KAAK+F,aAAa,GAAG/B,IAAKhE,KAAK+F,aAAa,GAAG/B,8BAM5F,kBACS,IAAII,GAAMpE,KAAK2G,OAAQ3G,KAAK+E,OAAQ/E,KAAK+F,aAAa,GAAG/B,IAAKhE,KAAK+F,aAAa,GAAG/B,0BAe5F,kBACShE,KAAK+E,OAAOrF,4BAGrB,kBACSM,KAAK+F,aAAa,GAAG5B,0BAG9B,kBACSnE,KAAK+F,aAAa,GAAG5B,4BAG9B,kBACSnE,KAAK+F,aAAa,yBAG3B,kBACS/F,KAAK+F,aAAa,YC1GhBqC,yBAOQzD,EAAe0D,EAAiBC,GACvC3D,EAAM1F,OAAS,GAAzBtB,MAEEgH,EAAM4D,OAAM,SAAA1D,UAAQA,EAAKnF,UAAYiF,EAAM,GAAGjF,YADhD/B,UAKM6K,EAAiB3I,GAAkB8E,EAAM,GAAGjF,SAE/C2I,aAAiB3H,IAASiE,EAAM,GAAG+B,cAAc2B,IAC/CA,IAAUG,GAAkB7D,EAAM,GAAG+B,cAAcxF,GAAKyD,EAAM,GAAGjF,WAFtE/B,WAMoB,IAAX2K,GACJA,aAAkB5H,IAASiE,EAAMA,EAAM1F,OAAS,GAAGyH,cAAc4B,IACjEA,IAAWE,GAAkB7D,EAAMA,EAAM1F,OAAS,GAAGyH,cAAcxF,GAAKyD,EAAM,GAAGjF,WAHtF/B,gBAOMmH,EAAgB,CAACuD,aAAiB3H,GAAQ2H,EAAQnH,GAAKyD,EAAM,GAAGjF,cAC9CiF,EAAMC,0BAAW,eAA1BC,OACP4D,EAAe3D,QACX2D,EAAa9H,OAAOkE,EAAKE,SAAW0D,EAAa9H,OAAOkE,EAAK8B,SAAvEhJ,UACM2K,EAASG,EAAa9H,OAAOkE,EAAKE,QAAUF,EAAK8B,OAAS9B,EAAKE,OACrED,EAAK5F,KAAKoJ,QAGP3D,MAAQA,OACRG,KAAOA,OACP4D,SAAWtE,GAAMI,UAAUxE,WAC3BqI,MAAQA,OACRC,OAASA,MAAAA,EAAAA,EAAUxD,EAAKA,EAAK7F,OAAS,kCAG7C,kBACSe,KAAK2E,MAAM,GAAGjF,iBChDnBiJ,GAAe,IAAI1G,GAAS3F,GAErBsM,mGACJlG,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC3C,KAAKuC,SAASoG,IAAcjG,cAAcC,EAAmBC,EAAQC,MAGvEU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BtD,KAAKuC,SAASoG,IAAcpF,QAAQD,EAAeV,EAAQC,OANzCZ,aC8Bb4G,GAAsBC,EAAgBC,UAE1ChI,GAAe+H,EAAE7B,YAAYrD,SAAUmF,EAAE9B,YAAYrD,WAA/DjG,MACUoD,GAAe+H,EAAEzB,aAAazD,SAAUmF,EAAE1B,aAAazD,WAAjEjG,MACImL,EAAEzB,aAAa5E,QAAQsG,EAAE1B,cACvByB,EAAE7B,YAAYxE,QAAQsG,EAAE9B,aACnB,EAGL6B,EAAE7B,YAAYtI,SAASoK,EAAE9B,cACnB,EAED,EAIL6B,EAAEzB,aAAa1I,SAASoK,EAAE1B,cACrB,GAEC,WAME2B,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,YAAYvK,SAASoK,EAAEG,cACnB,EACCJ,EAAEI,YAAY1K,YAAYuK,EAAEG,aAC9B,EAIFJ,EAAErE,MAAMK,KAAK7F,OAAS8J,EAAEtE,MAAMK,KAAK7F,OAe5C,SAASkK,GAAc3D,EAAgC9F,UACjD8F,aAA0BtB,GAAoBsB,EAC9CA,EAAe5B,WAAa/D,GAAkBH,GAAiB,IAAIwE,GAAYhD,GAAKxB,GAAU8F,EAAexB,UACjHrG,MAGF,SAASyL,GAAgBxF,EAAoBlE,UACvCkE,aAAoBlD,GAAckD,EAClCA,IAAa/D,GAAkBH,GAAiBwB,GAAKxB,QACzD/B,MAOF,IAAa0L,yBAgDQ5E,EAAcZ,EAAwByF,OACjDC,EAAyB,IAAIC,MAAM/E,EAAMK,KAAK7F,QAC9CwK,EAAoB,IAAID,MAAM/E,EAAME,MAAM1F,WAC5CqK,IAAc7N,kBAAUiO,YAAa,CAC7B3I,GAAe8C,EAAOD,SAAUa,EAAM4D,QAAhD1K,MACA4L,EAAQ,GAAKJ,GAActF,EAAQY,EAAM/E,aACpC,IAAIiK,EAAI,EAAGA,EAAIlF,EAAMK,KAAK7F,OAAS,EAAG0K,IAAK,OACjClF,EAAME,MAAMgF,GACa3C,gBAAgBuC,EAAQI,IAAzCC,OACrBL,EAAQI,EAAI,QACZF,EAAUE,GAAKC,OAEZ,CACK7I,GAAe8C,EAAOD,SAAUa,EAAM6D,SAAhD3K,MACA4L,EAAQA,EAAQtK,OAAS,GAAKkK,GAActF,EAAQY,EAAM/E,aACrD,IAAIiK,EAAIlF,EAAMK,KAAK7F,OAAS,EAAG0K,EAAI,EAAGA,IAAK,OACjClF,EAAME,MAAMgF,EAAI,GACQrC,eAAeiC,EAAQI,IAAxCC,OACpBL,EAAQI,EAAI,QACZF,EAAUE,EAAI,GAAKC,OAxJ+CvC,EAClEwC,EAEAC,EAyJEtB,EAAiB3I,GAAkB4E,EAAM/E,cAC1C+E,MAAQA,OACR6E,UAAYA,OACZrC,YACHqC,IAAc7N,kBAAUiO,YACpB7F,EACAY,EAAM4D,QAAUG,EAChB7E,UAAsBc,EAAM/E,QAAS6J,EAAQ,GAAGvF,KAChDuF,EAAQ,QACTlC,aACHiC,IAAc7N,kBAAUsO,aACpBlG,EACAY,EAAM6D,SAAWE,EACjB7E,UAAsBc,EAAM/E,QAAS6J,EAAQA,EAAQtK,OAAS,GAAG+E,KACjEuF,EAAQA,EAAQtK,OAAS,QAC1B+K,eAAiB,IAAI5F,GACxBpE,KAAKiH,YAAYrD,SACjB5D,KAAKqH,aAAazD,SAClB5D,KAAKiH,YAAYjD,IACjBhE,KAAKqH,aAAarD,UAEfiG,aAAe7F,GAAMI,UAAU,IAAI4D,GAAMqB,EAAWhF,EAAM4D,aAC1Da,aAlLiE7B,EAkLErH,KAAKqH,aA/KzEyC,GAFAD,EAiLkCpF,EAAMiE,SAjLlB1E,IAAIzB,SAiLwBvC,KAAKiH,YAjLRjD,MAEzBxB,SAAS6E,EAAarD,KAAKtF,OAAOmL,GACvD,IAAIjB,GAAQkB,EAAS5H,UAAW4H,EAAS3H,gBAoHlC+H,QAAP,SAAezF,EAAc0F,UAC3B,IAAId,EAAM5E,EAAO0F,EAAU1O,kBAAUiO,gBAQhCU,SAAP,SAAgB3F,EAAc4F,UAC5B,IAAIhB,EAAM5E,EAAO4F,EAAW5O,kBAAUsO,0CAuDxCO,iBAAA,SAAiBC,MACXA,EAAkB5L,SAAS3C,IAAtC2B,MACIqC,KAAKsJ,YAAc7N,kBAAUsO,oBACxB/J,KAAKqH,iBAENmD,EAA4B,IAAIvI,GAAShG,GAC5CwC,IAAI8L,GACJnI,SACAG,SAASvC,KAAKqH,aAAarD,KAAKb,gBAC5BnD,KAAKqH,wBAAwBnD,GAChC,IAAIA,GAAYlE,KAAKqH,aAAalD,MAAOqG,GACzC7G,UAAsB3D,KAAKyE,MAAM/E,QAAS8K,MAQ3CC,gBAAA,SAAgBF,MACVA,EAAkB5L,SAAS3C,IAAtC2B,MACIqC,KAAKsJ,YAAc7N,kBAAUiO,mBACxB1J,KAAKiH,gBAENyD,EAA2B,IAAIzI,GAAShG,GAAKwC,IAAI8L,GAAmBhI,SAASvC,KAAKiH,YAAYjD,KAAKb,gBAClGnD,KAAKiH,uBAAuB/C,GAC/B,IAAIA,GAAYlE,KAAKiH,YAAY9C,MAAOuG,GACxC/G,UAAsB3D,KAAKyE,MAAM/E,QAASgL,MAkBpCC,iBAAP,SACLhG,EACAiG,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCH,YACnCI,IAAAA,EAAsB,IAEZrG,EAAM1F,OAAS,GAAzBtB,MACUuN,EAAU,GAApBvN,MACUoN,IAAqBH,GAAoBE,EAAa7L,OAAS,GAAzEtB,UACM+B,EACJkL,aAA4B1G,GACxB0G,EAAiBzG,MAAMzE,QACvBmL,aAAuBnK,GACvBmK,EAAYnL,aACZ0G,OACgBA,IAAZ1G,GAAV/B,cAEMwM,EAAWhB,GAAcyB,EAAkBlL,GAC3CyL,EAAW/B,GAAgByB,EAAanL,GACrCiK,EAAI,EAAGA,EAAIhF,EAAM1F,OAAQ0K,IAAK,KAC/B9E,EAAOF,EAAMgF,OAEd9E,EAAKE,OAAOpE,OAAOwJ,EAAShG,QAAWU,EAAK8B,OAAOhG,OAAOwJ,EAAShG,UACpEU,EAAKG,SAASvC,QAAQzG,KAAS6I,EAAKI,SAASxC,QAAQzG,QAErDqO,aAEAA,EAAaxF,EAAKmC,gBAAgBmD,MACpC,MAAOnM,MAEHA,EAAMoN,8CAGJpN,KAGJqM,EAAUlG,MAAMxD,OAAOwK,GACzBtM,EACEmM,EACA,IAAI3B,EACF,IAAIjB,aAAU0C,GAAcjG,IAAOkG,EAAiBnH,SAAUiH,GAC9DE,EACAtP,kBAAUiO,aAEZuB,EACAjC,SAEG,GAAIkC,EAAU,GAAKvG,EAAM1F,OAAS,EAAG,KACpCoM,EAAyB1G,EAAMO,MAAM,EAAGyE,GAAG2B,OAAO3G,EAAMO,MAAMyE,EAAI,EAAGhF,EAAM1F,SAGjFoK,EAAMsB,iBACJU,EACAhB,EACAQ,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAcjG,IAClBkG,EACAC,YAKCA,KAkBKO,kBAAP,SACL5G,EACA6G,EACAC,IAGAX,EACAY,EACAV,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBY,IAAAA,EAAoCD,YACpCT,IAAAA,EAAsB,IAEZrG,EAAM1F,OAAS,GAAzBtB,MACUuN,EAAU,GAApBvN,MACU+N,IAAsBD,GAAqBX,EAAa7L,OAAS,GAA3EtB,UACM+B,EACJ+L,aAA6BvH,GACzBuH,EAAkBtH,MAAMzE,QACxB8L,aAAsB9K,GACtB8K,EAAW9L,aACX0G,OACgBA,IAAZ1G,GAAV/B,cAEM0M,EAAYlB,GAAcsC,EAAmB/L,GAC7CiM,EAAUvC,GAAgBoC,EAAY9L,GACnCiK,EAAI,EAAGA,EAAIhF,EAAM1F,OAAQ0K,IAAK,KAC/B9E,EAAOF,EAAMgF,OAEd9E,EAAKE,OAAOpE,OAAO0J,EAAUlG,QAAWU,EAAK8B,OAAOhG,OAAO0J,EAAUlG,UACtEU,EAAKG,SAASvC,QAAQzG,KAAS6I,EAAKI,SAASxC,QAAQzG,QAErDmO,aAEAA,EAAYtF,EAAKyC,eAAe+C,MAClC,MAAOrM,MAEHA,EAAM4N,2CAGJ5N,KAGJmM,EAAShG,MAAMxD,OAAOgL,GACxB9M,EACEmM,EACA,IAAI3B,EACF,IAAIjB,IAAOvD,UAASiG,GAAeU,EAAYE,EAAkB9H,UACjE8H,EACAjQ,kBAAUsO,cAEZkB,EACAjC,SAEG,GAAIkC,EAAU,GAAKvG,EAAM1F,OAAS,EAAG,KACpCoM,EAAyB1G,EAAMO,MAAM,EAAGyE,GAAG2B,OAAO3G,EAAMO,MAAMyE,EAAI,EAAGhF,EAAM1F,SAGjFoK,EAAMkC,kBACJF,EACAG,EACArB,EACA,CACEc,cAAAA,EACAC,QAASA,EAAU,IAEpBrG,UAASiG,GACVY,EACAV,YAKCA,QChWX,SAASa,GAAMrG,cACDA,EAAexB,IAAI7F,SAAS,IAG1C,OAKsB2N,qCAUNC,mBAAP,SAA0BC,EAAcC,OACvCzD,EAAiB3I,GAAkBmM,EAAMvH,MAAM/E,SAC/CwM,EAAUF,EAAM/E,YAAYrD,WAAa4E,EACzC2D,EAAWH,EAAM3E,aAAazD,WAAa4E,EAErC0D,GAAWC,GAAvBxO,QACY,QAASsO,IAAYA,EAAQG,IAAM,GAA/CzO,UAaI0O,EACAC,EACA9O,EAbE+O,EAAa1O,EAAwBoO,EAAQO,WAC7CrC,EAAmB0B,GAAMG,EAAMvB,gBAAgBwB,EAAQQ,kBACvDpC,EAAoBwB,GAAMG,EAAM1B,iBAAiB2B,EAAQQ,kBACzD3H,EAAiBkH,EAAMvH,MAAMK,KAAK4H,KAAI,SAAAvI,UAASA,EAAMrG,WACrD6O,EACJ,QAASV,QACCW,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQd,EAAQG,KAAKjO,SAAS,SACjE8N,EAAQU,SAASxO,SAAS,IAE/B6O,EAAmBC,QAAQhB,EAAQiB,sBAKjClB,EAAM1C,gBACP7N,kBAAUiO,YACTwC,GACFG,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAACjC,EAAWvF,EAAMyH,EAAII,GAC7BnP,EAAQ2M,GACCgC,GACTE,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAACnC,EAAUE,EAAWvF,EAAMyH,EAAII,GACvCnP,EAhDO,QAkDP6O,EAAaW,EACT,wDACA,2BAEJV,EAAO,CAACnC,EAAUE,EAAWvF,EAAMyH,EAAII,GACvCnP,EAvDO,kBA0DN/B,kBAAUsO,aACFiD,GAAXrP,MACIuO,GACFG,EAAa,wBAEbC,EAAO,CAACjC,EAAWvF,EAAMyH,EAAII,GAC7BnP,EAAQ2M,GACCgC,GACTE,EAAa,wBAEbC,EAAO,CAACjC,EAAWF,EAAUrF,EAAMyH,EAAII,GACvCnP,EArEO,QAuEP6O,EAAa,2BAEbC,EAAO,CAACjC,EAAWF,EAAUrF,EAAMyH,EAAII,GACvCnP,EA1EO,aA8EN,CACL6O,WAAAA,EACAC,KAAAA,EACA9O,MAAAA,+RClIF2P,YACD3R,gBAAQ+E,SAAU,8CAC6B,OAO5B6M,qCAcAC,wBAClB3N,EACA5B,EACAwP,EACA1N,EACA7C,0BAEMwQ,UAaC,IAAI7M,GAAMhB,EAAS5B,EAASyP,EAAgB3N,EAAQ7C,aAjB3DuQ,IAAAA,EAAWE,qBAAmBC,aAAW/N,WAKe,2BAA/CyN,2BAAAO,EAAuBhO,uBAAvBiO,EAAkC7P,+BACrCqP,GAAqBzN,GAAS5B,oBACxB,IAAI8P,WAAS9P,EAAS+P,GAAOP,GAAU3N,WAAWmO,MAAK,SAACnO,oBAC5DwN,QACKA,WACFzN,kBACIyN,uBAAAY,EAAuBrO,WACzB5B,GAAU6B,UAGRA,qDAWGqO,uBAClB/H,EACAC,EACAoH,gBAAAA,IAAAA,EAAWE,qBAAmBC,aAAWxH,EAAOvG,WAEtCuG,EAAOvG,UAAYwG,EAAOxG,SAApC/B,UACMG,EAAU8H,GAAK7H,WAAWkI,EAAQC,0BACH,IAAI0H,WAAS9P,EAASmQ,EAAeC,IAAKZ,GAAUa,qCAAlFC,OAAWC,OACZC,EAAWrI,EAAOpF,YAAYqF,GAAU,CAACkI,EAAWC,GAAa,CAACA,EAAWD,UAC5E,IAAIxI,GAAK,IAAI1B,GAAY+B,EAAQqI,EAAS,IAAK,IAAIpK,GAAYgC,EAAQoI,EAAS"}